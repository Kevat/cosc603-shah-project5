package edu.towson.cis.cosc603.project5.coffeemaker;

import junit.framework.TestCase;
import org.junit.*;

/**
 *
 */
public class CoffeeMakerTest extends TestCase {
	private CoffeeMaker cm;
	private Inventory i;
	private Recipe r1, r2, r3, r4;

	@Before
	public void setUp() {
		cm = new CoffeeMaker();
		i = cm.checkInventory();

		r1 = new Recipe();
		r1.setName("Coffee");
		r1.setPrice(50);
		r1.setAmtCoffee(6);
		r1.setAmtMilk(1);
		r1.setAmtSugar(1);
		r1.setAmtChocolate(1);

		r2 = new Recipe();
		r2.setName("Coffee2");
		r2.setPrice(50);
		r2.setAmtCoffee(6);
		r2.setAmtMilk(1);
		r2.setAmtSugar(1);
		r2.setAmtChocolate(0);

		r3 = new Recipe();
		r3.setName("Coffee3");
		r3.setPrice(-10);
		r3.setAmtCoffee(-10);
		r3.setAmtMilk(-10);
		r3.setAmtSugar(-10);
		r3.setAmtChocolate(-10);

		r4 = new Recipe();
		r4.setName("Coffee4");
		r4.setPrice(50);
		r4.setAmtCoffee(100);
		r4.setAmtMilk(100);
		r4.setAmtSugar(100);
		r4.setAmtChocolate(100);
	}
	
	@Test
	public void testAddRecipe1() {
		assertTrue(cm.addRecipe(r1));
	}

	@Test
	public void testAddRecipe2() {
		assertTrue(cm.addRecipe(r1));
		assertTrue(cm.addRecipe(r2));
		assertTrue(cm.addRecipe(r3));
		assertFalse(cm.addRecipe(r4));
	}

	@Test
	public void testAddRecipe3() {
		assertTrue(cm.addRecipe(r1));
		assertFalse(cm.addRecipe(r1));
	}
	
	@Test
	public void testDeleteRecipe1() {
		cm.addRecipe(r1);
		assertTrue(cm.deleteRecipe(r1));
	}

	@Test
	public void testDeleteRecipe2() {
		cm.addRecipe(r1);
		assertFalse(cm.deleteRecipe(r4));
	}

	@Test
	public void testEditRecipe1() {
		cm.addRecipe(r1);
		Recipe newRecipe = new Recipe();
		newRecipe.setPrice(40);
		newRecipe.setAmtCoffee(2);
		newRecipe.setAmtMilk(2);
		newRecipe.setAmtSugar(2);
		newRecipe.setAmtChocolate(2);
		assertTrue(cm.editRecipe(r1, newRecipe));
	}

	@Test
	public void testEditRecipe2() {
		cm.addRecipe(r1);
		Recipe newRecipe = new Recipe();
		newRecipe.setPrice(40);
		newRecipe.setAmtCoffee(2);
		newRecipe.setAmtMilk(2);
		newRecipe.setAmtSugar(2);
		newRecipe.setAmtChocolate(2);
		assertFalse(cm.editRecipe(r4, newRecipe));
	}

	@Test
	public void testCheckInventory1() {
		i = cm.checkInventory();
		assertEquals(15,i.getCoffee());
		assertEquals(15,i.getMilk());
		assertEquals(15,i.getSugar());
		assertEquals(15,i.getChocolate());
	}
	
	@Test
	public void testAddInventory1() {
		assertTrue(cm.addInventory(5, 5, 5, 5));
		assertTrue(cm.addInventory(5, 5, 5, 5));
	}

	@Test
	public void testAddInventory2() {
		assertFalse(cm.addInventory(-1, 5, 5, 5));
	}

	@Test
	public void testPurchaseBeverage1() {
		assertTrue(cm.addRecipe(r1));
		assertTrue(cm.addInventory(5, 5, 5, 5));
		assertEquals(10, cm.makeCoffee(r1, 60));
		assertEquals(14, i.getCoffee());
		assertEquals(19,i.getMilk());
		assertEquals(19,i.getSugar());
		assertEquals(19,i.getChocolate());
	}

	@Test
	public void testPurchaseBeverage2() {
		assertTrue(cm.addRecipe(r1));
		assertTrue(cm.addInventory(5, 5, 5, 5));
		assertEquals(20, cm.makeCoffee(r1, 20));
		i = cm.checkInventory();
		assertEquals(20, i.getCoffee());
		assertEquals(20,i.getMilk());
		assertEquals(20,i.getSugar());
		assertEquals(20,i.getChocolate());
	}
	
	@Test
	public void testPurchaseBeverage3() {
		assertTrue(cm.addRecipe(r1));
		assertTrue(cm.addInventory(5, 5, 5, 5));
		assertEquals(0, cm.makeCoffee(r1, 50));
		i = cm.checkInventory();
		assertEquals(20, i.getCoffee());
		assertEquals(20,i.getMilk());
		assertEquals(20,i.getSugar());
		assertEquals(20,i.getChocolate());
	}
	
	@Test
	public void testPurchaseBeverage4() {
		assertTrue(cm.addRecipe(r4));
		assertTrue(cm.addInventory(5, 5, 5, 5));
		assertEquals(60, cm.makeCoffee(r4, 60));
		i = cm.checkInventory();
		assertEquals(20, i.getCoffee());
		assertEquals(20,i.getMilk());
		assertEquals(20,i.getSugar());
		assertEquals(20,i.getChocolate());
	}
	
	@After
	public void tearDown() {
		cm = null;
		i = null;
		r1 = null;
		r2 = null;
		r3 = null;
		r4 = null;
	}
}